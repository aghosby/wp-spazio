// -----------------------------------------------
//
// SBX custom mixins.
// Note: These mixins can override certain Bootstrap mixins.
//
// -----------------------------------------------

/*=============================================
=            Layouts            =
=============================================*/

/**
 *
 * Creates a flex layout. Centred by default
 *
 */

@mixin sbx-flex($layout: center) {
	display: flex;
	justify-content: $layout;
	// align-items: center;
	flex-wrap: wrap;
	align-items: stretch; // Ensures equal heights for children in multi-line flex container
}

/*=====  End of Layouts  ======*/

/*=============================================
=          Backgrounds  & Gradients          =
=============================================*/

/**
 *
 * Creates backgrounds with default images
 * from placeholder.com.
 *
 */
@mixin sbx-background(
	$url: "https://via.placeholder.com/200",
	$pos: center center
) {
	background-image: url($url);
	background-position: $pos;
	background-repeat: no-repeat;
	background-size: cover;
}

/**
 *
 * Creates a linear gradient with two colours.
 * The gradient direction can also be specified. 
 *
 */
@mixin sbx-linear-gradient(
	$direction: to right,
	$color1: $primary,
	$color2: $secondary
) {
	background-color: nth($color1, 1);
	background-image: linear-gradient($direction, $color1, $color2);
}

/**
 *
 * Creates a background with an image and a linear gradient on top
 * The linear gradient is composed of two colors and the direction can be specified
 *
 */

@mixin sbx-linear-gradient-image(
	$direction: to right,
	$color1: rgba($black, 0.1),
	$color2: rgba($black, 0.9),
	$imageURL: "https://via.placeholder.com/200"
) {
	background-color: nth($color1, 1);
	background-image: linear-gradient($direction, $color1, $color2),
		url($imageURL);
	background-position: center center;
	background-repeat: no-repeat;
	background-size: cover;
}

/**
 *
 * Creates a box-shadow effect and adds a hover state also. 
 *
 */
@mixin sbx-box-shadow($alpha1: 0.1, $alpha2: 0.25) {
	box-shadow: 0px 5px 20px rgba($dark, $alpha1);
	transition: box-shadow $transition-normal ease-out;
	&:hover {
		box-shadow: 0px 5px 20px rgba($dark, $alpha2);
	}
}

// @mixin sbx-box-shadow(5px: 5px, 20px: 20px, $blur2: 5px, $spread2: 20px) {
// 	box-shadow: 0px $blur1 $spread1 rgba($color: $dark, $alpha: 0.1);
// 	transition: box-shadow $transition-normal ease-out;
// 	&:hover {
// 		box-shadow: 0px $blur2 $spread2 rgba($color: $dark, $alpha: 0.25);
// 	}
// }
/*=====  End of Backgrounds  ======*/

/*=============================================
=            Media queries            =
=============================================*/

/**
 *
 * Defines breakpoints for media queries below.
 * Uses default breakpoints set in variables.scss
 *
 */
$media-types: (
	xs: $xs,
	sm: $sm,
	md: $md,
	lg: $lg,
	xl: $xl,
	xxl: $xxl,
);

/**
 *
 * Defines breakpoints for high pixel density devices (>2x)
 *
 */
$media-types-retina: (
	non-retina: "screen and (-webkit-max-device-pixel-ratio: 1)",
	retina: "screen and (-webkit-min-device-pixel-ratio: 2)",
);

/**
 *
 * Media queries using desktop-first approach (max)
 *
 */
@mixin sbx-media-max($size) {
	@if map-has-key($media-types, $size) {
		@media only screen and (max-width: #{map-get($media-types, $size)}) {
			@content;
		}
	} @else {
		@media only screen and (max-width: #{$size}) {
			@content;
		}
	}
}

/**
 *
 * Media queries using mobile-first approach
 *
 */
@mixin sbx-media-min($size) {
	@if map-has-key($media-types, $size) {
		@media only screen and (min-width: #{map-get($media-types, $size)}) {
			@content;
		}
	} @else {
		@media only screen and (min-width: #{$size}) {
			@content;
		}
	}
}

/**
 *
 * Media queries targeting high pixel density devices (>2x)
 *
 */
@mixin sbx-media-retina($size) {
	@if not map-has-key($media-types-retina, $size) {
		@warn "#{$size} is not a known media type. Using retina instead.";
		$size: retina;
	}
	@media only #{map-get($media-types-retina, $size)} {
		@content;
	}
}

/*=====  End of Media queries  ======*/

/*=============================================
=            Components           =
=============================================*/

/**
 * Creates a 'tailwind CSS' style link underline 
 */
@mixin link-underline(
	$link-color: $dark,
	$underline-color: $primary,
	$underline-thickness: $underline-thickness,
	$underline-offset: $underline-offset
) {
	// Reset styles first
	// text-decoration: none;
	// transition: all $transition-normal;
	text-decoration: none;
	&:hover,
	&:focus {
		text-decoration: none;
	}

	color: $link-color;
	text-decoration: underline solid transparent $underline-thickness;
	text-underline-offset: $underline-offset;
	transition: all $transition-normal;

	&:hover {
		color: $link-color;
		text-decoration: underline solid $underline-color $underline-thickness;
	}

	&:active {
		color: $link-color;
	}
}

/**
 *
 * Overrides default Bootstrap .btn class.
 * This class defines the base button styles
 * Deprecated! (Use the 'Button styles' section of _variables.scss)
 *
 */

// @mixin btn($border: 2px, $radius: 10px) {
// 	display: inline-block;
// 	padding: 9px 18px;
// 	cursor: pointer;
// 	outline: none;
// 	border-width: $border;
// 	border-style: solid;
// 	border-radius: $radius;
// 	&:focus,
// 	&:hover {
// 		transition: all $normal;
// 	}
// 	&:active {
// 		transition: all $normal;
// 	}
// }

/**
 *
 * Custom SBX outline button style.
 * Deprecated! (Use Bootstrap .btn-outline-$color)
 *
 */
// @mixin btn-outline($color, $color-alt) {
// 	@include btn();
// 	color: $color;
// 	border-color: $color;
// 	background-color: transparent;
// 	&:focus,
// 	&:hover {
// 		color: $color-alt;
// 		background-color: $color;
// 		border-color: $color;
// 	}
// 	&:active {
// 		color: $color-alt;
// 		background-color: darken($color, 10%);
// 		border-color: darken($color, 10%);
// 	}
// }

/**
 *
 * Custom SBX solid button style.
 * Deprecated! (Use Bootstrap .btn-$color)
 *
 */
// @mixin btn-solid($color, $color-alt) {
// 	@include btn();
// 	color: $color-alt;
// 	border-color: $color;
// 	background-color: $color;
// 	&:focus,
// 	&:hover {
// 		color: $color-alt;
// 		background-color: darken($color, 10%);
// 		border-color: darken($color, 10%);
// 	}
// 	&:active {
// 		color: $color-alt;
// 		background-color: darken($color, 20%);
// 		border-color: darken($color, 20%);
// 	}
// }

/*=====  End of Components  ======*/
